#cree en 2024
#cree par max divito et Francis Genois
#projet tp4

#les dimensions de l'ecran
SCREEN_WIDTH = 640
SCREEN_HEIGHT = 480



import random
import arcade

#les informations sur les boules
class cercle():
   def __init__(self, x, y):
       self.cercle_x = x
       self.cercle_y = y
       self.change_x = random.randint(-5, 5)
       self.change_y = random.randint(-5, 5)
       self.rayon_cercle = random.randint(10, 30)
       self.color = arcade.color.ROSE

   def upddate(self, delta_time: float):
       #bouger les cercles
       self.cercle_x += self.change_x
       self.cercle_y += self.change_y

       #rebondir la balle sure les extremite du window
       if self.cercle_x < self.rayon_cercle:
           self.change_x *= -1
       if self.cercle_x > SCREEN_WIDTH - self.rayon_cercle:
           self.change_x *= -1
       if self.cercle_y < self.rayon_cercle:
           self.change_y *= -1
       if self.cercle_y > SCREEN_HEIGHT - self.rayon_cercle:
           self.change_y *= -1

       #assurer que la balle n arrete pas de bouger
       while self.change_x == 0:
           self.change_x = random.randint(-5, 5)
       while self.change_y == 0:
           self.change_y = random.randint(-5, 5)
   
   #dessiner les cercles      
   def draw(self):
       arcade.draw_circle_filled(self.cercle_x, self.cercle_y, self.rayon_cercle, self.color)

#les informations des rectangles
class rectangle():
   def __init__(self, x, y):
       self.rectangle_x = x
       self.rectangle_y = y
       self.change_x = random.randint(-5, 5)
       self.change_y = random.randint(-5, 5)
       self.largeur_rectangle = random.randint(30, 50)
       self.longueur_rectangle = random.randint(20, 40)
       self.color = arcade.color.ROSE

   def update(self, delta_time: float):
       #le mouvement des rectangles
       self.rectangle_x += self.change_x
       self.rectangle_y += self.change_y

        #rebondir le rectangle sure les extremite du window
       if self.rectangle_x < self.longueur_rectangle:
           self.change_x *= -1
       if self.rectangle_x > SCREEN_WIDTH - self.longueur_rectangle:
           self.change_x *= -1
       if self.rectangle_y < self.largeur_rectangle:
           self.change_y *= -1
       if self.rectangle_y > SCREEN_HEIGHT - self.largeur_rectangle:
           self.change_y *= -1

       #assurer que le rectangle n arrete pas de bouger    
       while self.change_x == 0:
           self.change_x = random.randint(-5, 5)   
       while self.change_y == 0:
           self.change_y = random.randint(-5, 5)
           
   def draw(self):
       arcade.draw_rectangle_filled(self.rectangle_x, self.rectangle_y, self.largeur_rectangle, self.longueur_rectangle, self.color)



class MyGame(arcade.Window):
   
   #cree le window qui va afficher les balles et rectangles
   def __init__(self, SCREEN_WIDTH, SCREEN_HEIGHT, title):

      super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, title)
      
      #lists qui contients et memorise tout les balles et rectangles presente sur lecran.
      self.balle = []
      self.rectangle = []
    #fonction qui va assurer que chaque balle et rectangle dans les listes vont tous etre dessiner et vont pas disparetre apres un update
   def on_draw(self):
       arcade.start_render()
       for i in self.balle:
           i.draw()
       for i in self.rectangle:
           i.draw()


    #fonction qui assure que les balles et les rectangles sauvegarder dans les listes se font chaqun update avec le fonction update
   def on_update(self, delta_time: float):
       for i in self.balle:
           i.upddate(delta_time)
       for i in self.rectangle:
           i.update(delta_time)



 #fonction qui permet de dessiner un cercle ou une rectangle avec les clicks de la souris et que ces figures apparaise au cordonnes du souris.
   def on_mouse_press(self, x: int, y: int, button: int, modifiers: int):
       if button == arcade.MOUSE_BUTTON_RIGHT:
           new_rectangle = rectangle(x, y)
           self.rectangle.append(new_rectangle)


       elif button == arcade.MOUSE_BUTTON_LEFT:
           new_cercle = cercle(x, y)
           self.balle.append(new_cercle)








#fonction qui affiche le window, active arcade et appelle la fonction de my game pour commencer le jeu
def main():
   window = MyGame(640, 480, "Drawing Example")
   #window.setup()
   arcade.run()

main()




